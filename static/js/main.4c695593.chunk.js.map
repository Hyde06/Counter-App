{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","onDelete","id","classes","value","count","Component","Counters","onReset","counters","map","App","state","handleReset","c","setState","handleIncrement","index","indexOf","handleDecrement","handleDelete","counterId","filter","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c695593.chunk.js","sourcesContent":["import React from 'react';\r\n//Stateless Functional Component\r\nconst NavBar =  ({ totalCounters}) => {\r\n    //console.log('NavBar-Rendered')\r\n    return ( \r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar {\" \"} \r\n        <span className=\"badge badge-pill badge-secondary\">\r\n            {totalCounters} \r\n        </span>\r\n        </a>\r\n      </nav> \r\n      );\r\n};\r\n\r\n\r\n\r\n/*class NavBar extends Component {\r\n    \r\n    render() { \r\n        \r\n    }\r\n}*/\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\n\r\nclass Counter extends Component {\r\n   \r\n    /* state = {\r\n        value: this.props.counter.value\r\n        tag: []\r\n    };\r\n     constructor(){\r\n        super();\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n     adding a custom constructor to access this feature. }\r\n\r\n    handleIncrement = product => {\r\n        this.setState({value: this.state.value + 1});\r\n        \r\n        // console.log('Increment Clicked', this);\r\n        //object.method();\r\n        //function();\r\n    };*/\r\n\r\n    /*doHandleIncrement = () => {\r\n        this.handleIncrement({ id : 1 });\r\n    };(replaced by the inline code for the onClick func.)\r\n\r\n    renderTags() {\r\n        if(this.state.tag.length === 0)\r\n        return <p>There are no tags!!!</p>;\r\n        \r\n        return <ul>{this.state.tag.map(tag => <li key={tag}>{tag}</li>)}</ul>;\r\n          this is how you render a list using the map feature */\r\n    \r\n\r\n    render() {\r\n        //console.log('Counter-Rendered');\r\n        return (\r\n        <div>\r\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button \r\n            onClick={() => this.props.onIncrement(this.props.counter)} \r\n            className=\"btn btn-secondary btn-sm\">Increment</button>\r\n            \r\n            <button \r\n            onClick={() => this.props.onDecrement(this.props.counter)} \r\n            className=\"btn btn-secondary btn-sm m-2\">Decrement</button>\r\n\r\n            <button onClick={() => this.props.onDelete(this.props.counter.id)}\r\n             className=\"btn btn-danger btn-sm m-2\">Delete</button>\r\n            {//<h4>Counter #{this.props.id}</h4>\r\n            /*the && operator is used between 2 non boolean values first is bol. and second is string\r\n            {this.state.tag.length === 0 && 'Please create a new tag!!'}\r\n            {this.renderTags()};*/}\r\n        </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    getBadgeClasses() {\r\n        var classes = \"badge m-2 badge-\";\r\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){\r\n        const{ value: count } = this.props.counter;\r\n        return count === 0 ? 'Zero' : count;\r\n    }\r\n}\r\n \r\nexport default Counter ;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    \r\n\r\n    render() {\r\n        //console.log('Counters-Rendered'); \r\n        const {onReset, onDelete, onIncrement, onDecrement} = this.props;\r\n        return (<div>\r\n            <button\r\n            onClick={onReset} \r\n            className=\"btn btn-primary btn-sm m-2\">Reset</button>\r\n\r\n        { this.props.counters.map(counter => \r\n            (<Counter \r\n                key={counter.id} \r\n                onDelete={onDelete} \r\n                onIncrement={onIncrement}\r\n                onDecrement={onDecrement}\r\n                counter={counter}\r\n                //you can just pass counter which will include all the properties of the state counters instead of doing it 1 by 1\r\n                //value={counter.value} \r\n                //id={counter.id} \r\n            />\r\n        ))}\r\n\r\n        </div>\r\n    );\r\n    }\r\n}\r\n \r\nexport default Counters;\r\n\r\n\r\n\r\n\r\n//Note: if you want to render a method you need to start with uppercase name.","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters'\nimport './App.css';\n\nclass App extends Component {\n  state = { \n    counters : [\n        {id: 1, value: 0},\n        {id: 2, value: 0},\n        {id: 3, value: 0},\n        {id: 4, value: 0},\n    ]\n};\n\n//constructor(props){\n  //super(props);\n  //console.log(\"App-Constructor\", this.props);\n  //this.state = this.props.something;\n// }\n\n//componentDidMount(){\n // console.log('App-Mounted');\n//}\n\nhandleReset = () => {\n    const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n    });\n    this.setState({counters});\n};\n\nhandleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index]={...counter };\n    counters[index].value++;\n    this.setState({counters});\n };\n handleDecrement = counter => {\n  const counters = [...this.state.counters];\n  const index = counters.indexOf(counter);\n  counters[index]={...counter };\n  if (counters[index].value >0) \n  counters[index].value--;\n\n  this.setState({counters});\n };\n\nhandleDelete = (counterId) => {\n    const counters = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({counters});\n};\n  \nrender() { \n  //console.log('App-Rendered');\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}\n       />\n      <main className='container'>\n        <Counters \n        counters={this.state.counters}\n        onDelete={this.handleDelete} \n        onIncrement={this.handleIncrement}\n        onDecrement={this.handleDecrement}\n        onReset={this.handleReset}\n         />\n      </main>\n      </React.Fragment>\n\n    );\n  }\n}\n \n\nexport default App;    \n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}